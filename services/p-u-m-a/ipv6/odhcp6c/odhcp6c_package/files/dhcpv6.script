#!/bin/sh
[ -z "$2" ] && echo "Error: should be run by odhcpc6c" && exit 1
. /lib/functions.sh
. /lib/netifd/netifd-proto.sh

LOG="/tmp/odhcp6c.log"
DATE=`date +%F_%H:%M:%S`

setup_interface () {
	local device="$1"
	proto_init_update "*" 1
	local dnslist=" option dns-server "
	local domainlist=" option domain "
	local sdnsline=""
	local sdomainline=""
	local dibblerrestartflag=0
	local dibbleroptrestartflag=0
	local radvddns=""

	# Merge RA-DNS
	echo "$SERVER" > /tmp/dhcp6cServerIP
	echo "=============DNS==============" > /tmp/test.txt
	echo "RA_DNS:  $RA_DNS" >> /tmp/test.txt
	echo "RDNSS:  $RDNSS" >> /tmp/test.txt
	
	for radns in $RA_DNS; do
		local duplicate=0
		for dns in $RDNSS; do
			[ "$radns" = "$dns" ] && duplicate=1
		done
		
		echo "duplicate:  $duplicate" >> /tmp/test.txt
		
		#judge the dns is ipv4 or ipv6, if ipv4 add it to dnsmasq
		#if ipv6 add it to RDNSS
		local fourcon="."
		local re

		re=`echo $radns|grep $fourcon|wc -l`
		if [ $re = 0 ]; then
			[ "$duplicate" = 0 ] && RDNSS="$RDNSS $radns"
		else
			uci add_list dhcp.@dnsmasq[0].server="$radns"
			uci commit dhcp
		fi
	done

	#judge the RDNSS'ipv4 dns and ipv6 dns and push them in another str
	local DNSFOUR
	local DNSSIX
	
	if [ "$RDNSS" != "" ]; then
		for dns in $RDNSS; do
			local fourcon="."
			local re
			
			re=`echo $dns|grep $fourcon|wc -l`
			if [ $re = 0 ]; then
				DNSSIX="$DNSSIX $dns"	
			else
				DNSFOUR="$DNSFOUR $dns"
			fi	
		done
	fi

	if [ "DNSFOUR" != "" ]; then
		for dns in $DNSFOUR; do
			uci add_list dhcp.@dnsmasq[0].server="$radns"
			uci commit dhcp
		done
	fi

	if [ "$DNSSIX" != "" ]; then
		local dns_dib=""
		local dns_uci=""	
		local reinf=0
		local dns_diff_flag=0

		#get the dns server information from dibbler server 
		#dns_dib=`grep -rn "option dns-server" /etc/dibbler/server.conf`
		dns_dib=`uci get ipv6.@global[0].dns`
		echo "dns_dib:  $dns_dib" >> /tmp/test.txt

		for dns in $DNSSIX; do
			#judge the dns is ipv4 or ipv6, if ipv4 add it to dnsmasq
			#if ipv6 add it to dns server
			local sixcon=":"
			local re
			
			re=`echo $dns|grep $sixcon|wc -l`
			if [ $re != 0 ]; then
				proto_add_dns_server "$dns"
			fi
		done

		if [ "$dns_dib" != "" ];then
			for dns in $DNSSIX; do
				dns_diff_flag=1
			
				echo "dns:  $dns" >> /tmp/test.txt
				for i in $dns_dib; do
					echo "i: $i" >> /tmp/test.txt
					if [ "$dns" = "$i" ];then
						dns_diff_flag=0
					fi
				done
				echo "dns_diff_flag:  $dns_diff_flag" >> /tmp/test.txt
			
				if [ $dns_diff_flag = 1 ];then
					dibbleroptrestartflag=1
					break
				fi
			
			done
		else
			dns_diff_flag=1
			dibbleroptrestartflag=1
		fi	

		echo "dibbleroptrestartflag:  $dibbleroptrestartflag" >> /tmp/test.txt

		if [ $dns_diff_flag = 1 ];then
			radvddns=`uci get radvd.@rdnss[0].addr`
			for dnstmp in $radvddns; do
				uci del_list radvd.@rdnss[0].addr="$dnstmp"
			done	
		
			j=1
			for dns in $DNSSIX; do
				if [ $j -eq 1 ];then
					dnslist="$dnslist""$dns"
					dns_uci="$dns_uci""$dns"
				else
					dnslist=$dnslist","$dns
					dns_uci=$dns_uci" "$dns
				fi
			
				#add the DNS information to RDNSS of RADVD
				uci add_list radvd.@rdnss[0].addr="$dns"
			
				let j++
			done
			
			uci set radvd.@rdnss[0].ignore=0
			uci commit radvd
		
			#add the dns information to ipv6 uci config
			echo "dns_uci:  $dns_uci" >> /tmp/test.txt
			uci set ipv6.@global[0].dns="$dns_uci"
			uci commit ipv6
		
			echo "dnslist:  $dnslist" >> /tmp/test.txt
		
			#sdnsline=`grep -rn "option dns-server" /etc/dibbler/server.conf |cut -d":" -f 1`
			#sed -i "${sdnsline}c\\$dnslist" /etc/dibbler/server.conf
		fi
	fi

	echo >> /tmp/test.txt

	echo "=============DOMAIN==============" >> /tmp/test.txt
        echo "RA_DOMAINS:  $RA_DOMAINS" >> /tmp/test.txt                                                        
	echo "DOMAINS:  $DOMAINS" >> /tmp/test.txt
	
	for radomain in $RA_DOMAINS; do
		local duplicate=0
		for domain in $DOMAINS; do
			[ "$radomain" = "$domain" ] && duplicate=1
		done
		[ "$duplicate" = 0 ] && DOMAINS="$DOMAINS $radomain"
	done

	if [ "$DOMAINS" != "" ];then
		local retout=0	
		local domain_dib=""
		local domain_uci=""
		local domain_diff_flag=0
	
		#get the domain server information from dibbler server
		#domain_dib=`grep -rn "option domain" /etc/dibbler/server.conf`
		domain_dib=`uci get ipv6.@global[0].domain`
		echo "domain_dib:  $domain_dib" >> /tmp/test.txt		
		
		for domain in $DOMAINS; do
			proto_add_dns_search "$domain"
		done
		
		if [ "$domain_dib" != "" ];then
			for domain in $DOMAINS; do
				domain_diff_flag=1
				echo "domain:  $domain" >> /tmp/test.txt
				
				for i in $domain_dib; do
					echo "i: $i" >> /tmp/test.txt
					if [ "$domain" = "$i" ];then
						domain_diff_flag=0
					fi
				done
				
				echo "domain_diff_flag:  $domain_diff_flag" >> /tmp/test.txt		
				
				if [ "$domain_diff_flag" = 1 ];then
					dibbleroptrestartflag=1
					break
				fi
			done
		else
			domain_diff_flag=1
			dibbleroptrestartflag=1
		fi
		
		echo "dibbleroptrestartflag:  $dibbleroptrestartflag" >> /tmp/test.txt
		
		if [ "$domain_diff_flag" = 1 ];then
			j=1
			for domain in $DOMAINS; do
				if [ $j -eq 1 ];then
					domainlist="$domainlist""$domain"
					domain_uci="$domain_uci""$domain"
				else
					domainlist=$domainlist","$domain				
					domain_uci=$domain_uci" "$domain
				fi
				let j++
			done
			
			#set the domain infor into ipv6 uci config
			uci set ipv6.@global[0].domain="$domain_uci"
			uci commit ipv6
			
			echo "domainlist:  $domainlist" >> /tmp/test.txt
			#sdomainline=`grep -rn "option domain" /etc/dibbler/server.conf |cut -d":" -f 1`
			#sed -i "${sdomainline}c\\$domainlist" /etc/dibbler/server.conf
		fi
	fi
        echo >> /tmp/test.txt
	
	local prefix_for_lan=""
	local prefix_for_ra=""
	
	echo -e "$DATE:ORG-PREFIXES:[ \033[32m$PREFIXES\033[0m ]" >> $LOG
	for prefix in $PREFIXES; do
	        #echo -e "$DATE-SING-PREFIX:[ \033[32m$prefix\033[0m ]" >>$LOG
	        prefix_for_lan=${prefix%%/*}
	        local prefix_len=${prefix#*/}
	        prefix_len=${prefix_len%%,*}
	  
		proto_add_ipv6_prefix "$prefix"
		local entry="${prefix#*/}"
		entry="${entry#*,}"
		local preferred_lifetime="${entry%%,*}"
		entry="${entry#*,}"
		local valid="${entry%%,*}"
		local valid_lifetime=$valid
		
		echo "$DATE-VALID:[$valid]" >> $LOG
		echo "$DATE-PREFERRED:[$preferred_lifetime]" >> $LOG
		
		if [ -z "$RA_ADDRESSES" -a -z "$RA_ROUTES" -a \
				-z "$RA_DNS" -a "$FAKE_ROUTES" = 1 ]; then
			RA_ROUTES="::/0,$SERVER,$valid,4096"
		fi
	done
	
	
	[ -n "$USERPREFIX" ] && proto_add_ipv6_prefix "$USERPREFIX"

	echo -e "$DATE-\033[33m The RA_ADDRESSES is [$RA_ADDRESSES] \033[0m" >> $LOG
	# Merge addresses
	for entry in $RA_ADDRESSES; do
		local duplicate=0
		local addr="${entry%%/*}"
		for dentry in $ADDRESSES; do
			local daddr="${dentry%%/*}"
			[ "$addr" = "$daddr" ] && duplicate=1
		done
		[ "$duplicate" = "0" ] && ADDRESSES="$ADDRESSES $entry"
	done
	
	
	echo -e "$DATE-\033[33m The ADDRESSES is [$ADDRESSES] \033[0m" >> $LOG
	
	for entry in $ADDRESSES; do
		local addr="${entry%%/*}"
		echo -e "$DATE-\033[33m The addr is [$addr] \033[0m" >> $LOG  
		entry="${entry#*/}"
		local mask="${entry%%,*}"
		entry="${entry#*,}"
		local preferred="${entry%%,*}"
		entry="${entry#*,}"
		local valid="${entry%%,*}"

		proto_add_ipv6_address "$addr" "$mask" "$preferred" "$valid" 1

		if [ -z "$RA_ADDRESSES" -a -z "$RA_ROUTES" -a \
				-z "$RA_DNS" -a "$FAKE_ROUTES" = 1 ]; then
			RA_ROUTES="::/0,$SERVER,$valid,4096"
		fi
	done
	
##modifying start	
	if [ -z $prefix_for_lan ];then
		prefix_for_ra=""

#:<<DDD
		local addr_tmp=`echo $addr |awk -F ":" '{print $1,$2,$3,$4}'`
		local j=0
		for i in $addr_tmp
		do 
			if [ -n $i ];then
				if [ $j -gt 0 ];then
					prefix_for_lan=$prefix_for_lan":"$i
				else
					prefix_for_lan="$i"
				fi
				let j++
			fi
		done
		if [ $j -eq 4 ];then
			prefix_for_lan=$prefix_for_lan":"
		elif [ $j -lt 4 ];then
			prefix_for_lan=$prefix_for_lan"::"
		
		fi
#DDD
#		prefix_for_lan=$addr

		if [ $mask -ge 64 ];then
			prefix_len=64
		else
			prefix_len=$mask
		fi
		
		valid_lifetime=$valid
		preferred_lifetime=$preferred
		echo -e "$DATE-\033[31m get the prefix from the address.\033[0m" >> $LOG
		echo -e "$DATE-\033[31m The prefix_for_lan from the addr is [ $prefix_for_lan].\033[0m" >> $LOG
		echo -e "$DATE-\033[31m The prefix_len from the addr is [ $prefix_len].\033[0m" >> $LOG
		echo -e "$DATE-\033[31m The valid_lifetime from the addr is [ $valid_lifetime].\033[0m" >> $LOG
		echo -e "$DATE-\033[31m The preferred_lifetime from the addr is [ $preferred_lifetime].\033[0m" >> $LOG
	else	
		local prefixend="::"
		local jresult
		
		jresult=`echo $prefix_for_lan|grep $prefixend|wc -l`
		if [ $jresult = 0 ];then
			prefix_for_ra=$prefix_for_lan"::"
		else
			prefix_for_ra=$prefix_for_lan
		fi

	fi
	stateless=`uci get ipv6.@native[0].assign_type`
	if [ $stateless -ne 0 ];then
		prefix_len=64
	fi
	echo -e "$DATE-PREFIX:\033[32m $prefix \033[0m" >> $LOG
	#refer to the value of the dhcp_pd,then consider of the operation 
	#for the network lan address configrue.
	dhcp_pd=`uci get ipv6.@native[0].dhcp_pd`
	if [ $dhcp_pd -eq 1 ];then
		#write the prefix to the ipv6/network uci config file.
		
		#if [ -z $prefix_for_ra ];then
		#	uci set ipv6.@native[0].ipv6_addr=""
		#	uci set ipv6.@native[0].ipv6_prefix=""
		#	uci set ipv6.@native[0].prefix_len=""
		#	uci set ipv6.@native[0].pd_preferred_lifetime="0"
		#	uci set ipv6.@native[0].pd_valid_lifetime="0"
		#	uci commit ipv6
		#fi	

		if [ -n "$prefix_for_lan" ];then
			local dubleBytes=`echo $prefix_for_lan |awk -F ":" '{print $1,$2,$3,$4}'`
			local ipv6Head=""
			local ipv6Tail=""
			local lanMac=""
			#local lanIpv6Addr=""
			secCount=0
			for i in $dubleBytes
			do
				if [ -n "$i" ];then
					if [ $secCount -eq 0 ];then
						ipv6Head=$i
					else
						ipv6Head=$ipv6Head:$i
					fi
				else	
					ipv6Head=$ipv6Head:0
				fi
				let secCount++		
			done
			if [ $secCount -lt 4 ];then
				ipv6Head=$ipv6Head"::"
			else
				ipv6Head=$ipv6Head":"
			fi
			lanMac=`ifconfig br-lan |grep  HWaddr |awk '{print $NF}'`
			ipv6Tail=`eui64 $lanMac`
			#lanIpv6Addr="$ipv6Head""$ipv6Tail"
			
			echo -e "$DATE-IPv6Head:\033[35m $ipv6Head \033[0m" >> $LOG
			echo -e "$DATE-IPv6Tail:\033[35m $ipv6Tail \033[0m" >> $LOG
			#echo -e "$DATE-IPv6Addr:\033[35m $lanIpv6Addr \033[0m" >> $LOG
	
			local ipv6_lan_addr="$ipv6Head""$ipv6Tail"
			local new_ipv6_addr=$ipv6_lan_addr"/"$prefix_len
			
			echo -e "$DATE-\033[33m New ipv6addr[$new_ipv6_addr] \033[0m" >> $LOG
			local old_addr=`uci get ipv6.@native[0].ipv6_addr`
			local old_prefix_len=`uci get ipv6.@native[0].prefix_len`
			local old_ipv6_addr=$old_addr"/"$old_prefix_len
			local server_restart_flag=0
			echo -e "$DATE-\033[33m Old ipv6addr[$old_ipv6_addr] \033[0m" >> $LOG
			
			if [ "$new_ipv6_addr" != "$old_ipv6_addr" ];then
				echo -e "$DATE-\033[33m Update the lan ipv6addr \033[0m" >> $LOG
				ifconfig br-lan del $old_ipv6_addr
				ifconfig br-lan $new_ipv6_addr
				server_restart_flag=1
			else
				server_restart_flag=1
			fi
		
			if [ -z $prefix_for_ra ];then
				uci set ipv6.@native[0].ipv6_addr=""
				uci set ipv6.@native[0].ipv6_prefix=""
				uci set ipv6.@native[0].prefix_len=""
				uci set ipv6.@native[0].pd_preferred_lifetime="0"
				uci set ipv6.@native[0].pd_valid_lifetime="0"
				uci commit ipv6
			else
				uci set ipv6.@native[0].ipv6_addr="$ipv6_lan_addr"	
				uci set ipv6.@native[0].ipv6_prefix="$prefix_for_ra"
				uci set ipv6.@native[0].prefix_len="$prefix_len"
				uci set ipv6.@native[0].pd_preferred_lifetime="$preferred_lifetime"
				uci set ipv6.@native[0].pd_valid_lifetime="$valid_lifetime"
				uci set network.lan.ip6addr="$ipv6_lan_addr/$prefix_len"
				uci commit ipv6
				uci commit network
			fi
#:<<EOF			
			if [ $server_restart_flag -eq 1 ];then
				echo -e "$DATE-\033[32m restart the ipv6 \033[0m " >> $LOG
				#/etc/init.d/ipv6 start
				#sleep 10
				dibblerrestartflag=1
				if [ $? -eq 0 ];then
					echo -e "$DATE-\033[32m restart the server successfully \033[0m" >> $LOG
				else
					echo -e "$DATE-\033[31m restart the server failed \033[0m" >> $LOG
					
				fi
	
			fi
#EOF
		else
			echo -e "$DATE-\033[31m The Prefix Is Blank \033[0m" >> $LOG
		fi
	else 
		echo -e "$DATE-\033[33m The dhcp_pd is disabled,don't modify the network config file\033[0m" >> $LOG
	fi
	
##modifying end		
	
	for entry in $RA_ROUTES; do
		local duplicate=0
		local addr="${entry%%/*}"
		entry="${entry#*/}"
		local mask="${entry%%,*}"
		entry="${entry#*,}"
		local gw="${entry%%,*}"
		entry="${entry#*,}"
		local valid="${entry%%,*}"
		entry="${entry#*,}"
		local metric="${entry%%,*}"

		for xentry in $RA_ROUTES; do
			local xprefix="${xentry%%,*}"
			xentry="${xentry#*,}"
			local xgw="${xentry%%,*}"

			[ -n "$gw" -a -z "$xgw" -a "$addr/$mask" = "$xprefix" ] && duplicate=1
		done

		if [ -z "$gw" -o "$duplicate" = 1 ]; then
			proto_add_ipv6_route "$addr" "$mask" "$gw" "$metric" "$valid"
		else
			for prefix in $PREFIXES $ADDRESSES; do
				local paddr="${prefix%%,*}"
				proto_add_ipv6_route "$addr" "$mask" "$gw" "$metric" "$valid" "$paddr"
			done
		fi
	done

	proto_add_data
	[ -n "$CER" ] && json_add_string cer "$CER"
	[ -n "$PASSTHRU" ] && json_add_string passthru "$PASSTHRU"
	[ -n "$ZONE" ] && json_add_string zone "$ZONE"
	proto_close_data

	proto_send_update "$INTERFACE"

	MAPTYPE=""
	MAPRULE=""

	if [ -n "$MAPE" -a -f /lib/netifd/proto/map.sh ]; then
		MAPTYPE="map-e"
		MAPRULE="$MAPE"
	elif [ -n "$MAPT" -a -f /lib/netifd/proto/map.sh -a -f /proc/net/nat46/control ]; then
		MAPTYPE="map-t"
		MAPRULE="$MAPT"
	elif [ -n "$LW4O6" -a -f /lib/netifd/proto/map.sh ]; then
		MAPTYPE="lw4o6"
		MAPRULE="$LW4O6"
	fi

	[ -n "$ZONE" ] || ZONE=$(fw3 -q network $INTERFACE 2>/dev/null)

	if [ "$IFACE_MAP" != 0 -a -n "$MAPTYPE" -a -n "$MAPRULE" ]; then
		[ -z "$IFACE_MAP" -o "$IFACE_MAP" = 1 ] && IFACE_MAP=${INTERFACE}_4
		json_init
		json_add_string name "$IFACE_MAP"
		json_add_string ifname "@$INTERFACE"
		json_add_string proto map
		json_add_string type "$MAPTYPE"
		json_add_string rule "$MAPRULE"
		json_add_string tunlink "$INTERFACE"
		[ -n "$ZONE_MAP" ] || ZONE_MAP=$ZONE
		[ -n "$ZONE_MAP" ] && json_add_string zone "$ZONE_MAP"
		[ -n "$IFACE_MAP_DELEGATE" ] && json_add_boolean delegate "$IFACE_MAP_DELEGATE"
		json_close_object
		ubus call network add_dynamic "$(json_dump)"
	elif [ -n "$AFTR" -a "$IFACE_DSLITE" != 0 -a -f /lib/netifd/proto/dslite.sh ]; then
		[ -z "$IFACE_DSLITE" -o "$IFACE_DSLITE" = 1 ] && IFACE_DSLITE=${INTERFACE}_4
		json_init
		json_add_string name "$IFACE_DSLITE"
		json_add_string ifname "@$INTERFACE"
		json_add_string proto "dslite"
		json_add_string peeraddr "$AFTR"
		json_add_string tunlink "$INTERFACE"
		[ -n "$ZONE_DSLITE" ] || ZONE_DSLITE=$ZONE
		[ -n "$ZONE_DSLITE" ] && json_add_string zone "$ZONE_DSLITE"
		[ -n "$IFACE_DSLITE_DELEGATE" ] && json_add_boolean delegate "$IFACE_DSLITE_DELEGATE"
		json_close_object
		ubus call network add_dynamic "$(json_dump)"
	elif [ "$IFACE_464XLAT" != 0 -a -f /lib/netifd/proto/464xlat.sh ]; then
		[ -z "$IFACE_464XLAT" -o "$IFACE_464XLAT" = 1 ] && IFACE_464XLAT=${INTERFACE}_4
		json_init
		json_add_string name "$IFACE_464XLAT"
		json_add_string ifname "@$INTERFACE"
		json_add_string proto "464xlat"
		json_add_string tunlink "$INTERFACE"
		[ -n "$ZONE_464XLAT" ] || ZONE_464XLAT=$ZONE
		[ -n "$ZONE_464XLAT" ] && json_add_string zone "$ZONE_464XLAT"
		[ -n "$IFACE_464XLAT_DELEGATE" ] && json_add_boolean delegate "$IFACE_464XLAT_DELEGATE"
		json_close_object
		ubus call network add_dynamic "$(json_dump)"
	fi

	# Apply IPv6 / ND configuration
	HOPLIMIT=$(cat /proc/sys/net/ipv6/conf/$device/hop_limit)
	[ -n "$RA_HOPLIMIT" -a -n "$HOPLIMIT" ] && [ "$RA_HOPLIMIT" -gt "$HOPLIMIT" ] && echo "$RA_HOPLIMIT" > /proc/sys/net/ipv6/conf/$device/hop_limit
	[ -n "$RA_MTU" ] && [ "$RA_MTU" -gt 0 ] && echo "$RA_MTU" > /proc/sys/net/ipv6/conf/$device/mtu
	[ -n "$RA_REACHABLE" ] && [ "$RA_REACHABLE" -gt 0 ] && echo "$RA_REACHABLE" > /proc/sys/net/ipv6/neigh/$device/base_reachable_time_ms
	[ -n "$RA_RETRANSMIT" ] && [ "$RA_RETRANSMIT" -gt 0 ] && echo "$RA_RETRANSMIT" > /proc/sys/net/ipv6/neigh/$device/retrans_time_ms

	# TODO: $MTU add by damon
	#echo "==================MTU====================" >> /tmp/test.txt
	#echo "$RA_MTU:  $RA_MTU" >> /tmp/test/txt
	#if [ -n "$RA_MTU" ]; then
#		if [ "$RA_MTU" -gt 0 ]; then
#			uci set radvd.@interface[0].AdvLinkMTU="$RA_MTU"
#			uci commit radvd
#			uci set network.lan.mtu="$RA_MTU"
#			uci commit network
			
#			/etc/init.d/radvd restart
#			echo "$RA_MTU" > /proc/sys/net/ipv6/conf/br-lan/mtu
			#restart the lan to let option valid to host
			#for i in `seq 1 4`;do
			#	/usr/sbin/ssdk_sh port autoNeg restart $i > /dev/null 2>&1 &
			#done
#		fi
#	fi

	# TODO: $SNTP_IP $SIP_IP $SNTP_FQDN $SIP_DOMAIN
	local sntp_server=" option ntp-server "
	local slinenum
	local sntp_dib=""
	local sntp_uci=""
	local sntp_dup_flag=0

	
	echo "==================SNTP===================" >> /tmp/test.txt
	echo "SNTP_IP:  $SNTP_IP" >> /tmp/test.txt
	#get the sntp server lists from system environment
	if [ -n "$SNTP_IP" ]; then
		#get the sntp server information from dibbler server
		#sntp_dib=`grep -rn "option ntp-server" /etc/dibbler/server.conf`
		sntp_dib=`uci get ipv6.@global[0].sntp`
		echo "sntp_dib:  $sntp_dib" >> /tmp/test.txt

		#for sntp in $SNTP_IP; do
			#proto_add_sntp
		#done
		
		if [ "$sntp_dib" != "" ];then
			for sntp in $SNTP_IP; do
				sntp_dup_flag=1
				
				echo "sntp:  $sntp" >> /tmp/test.txt
				
				for i in $sntp_dib; do
					echo "i:  $i" >> /tmp/test.txt
					
					if [ "$sntp" = "$i" ];then
						sntp_dup_flag=0
					fi
				done
				
				echo "sntp_dup_flag:  $sntp_dup_flag" >> /tmp/test.txt
				
				if [ $sntp_dup_flag = 1 ];then
					dibbleroptrestartflag=1
					break
				fi
			done
		else
			sntp_dup_flag=1
			dibbleroptrestartflag=1
		fi
		
		echo "dibbleroptrestartflag:  $dibbleroptrestartflag" >> /tmp/test.txt
		
		if [ "$sntp_dup_flag" = 1 ];then	
			j=1
			for sntp in $SNTP_IP; do
				if [ $j -eq 1 ];then
					sntp_server="$sntp_server""$sntp"
					sntp_uci="$sntp_uci""$sntp"
				else
					sntp_server=$sntp_server","$sntp
					sntp_uci=$sntp_uci" "$sntp
				fi
				let j++
			done
		
			#set the sntp infor into ipv6 uci config
			uci set ipv6.@global[0].sntp="$sntp_uci"
			uci commit ipv6
				
			echo "sntp_server:  $sntp_server" >> /tmp/test.txt
			#delete the original ntp infor from dibbler-server.conf & set the update infor
			#slinenum=`grep -rn "option ntp-server" /etc/dibbler/server.conf |cut -d":" -f 1`
			#sed -i "${slinenum}c\\$sntp_server" /etc/dibbler/server.conf
		fi 
	fi
	echo  >> /tmp/test.txt
	
	if [ "$dibblerrestartflag" = 1 ] || [ "$dibbleroptrestartflag" = 1 ];then
		/etc/init.d/ipv6 start
		#sleep 5 
		/etc/init.d/ipv6 start do_dibbler_restart
		#sleep 5
		#restart the lan to let option valid to host
		for i in `seq 1 4`;do
			/usr/sbin/ssdk_sh port autoNeg restart $i > /dev/null 2>&1 &
		done
	fi
}

teardown_interface() {
	proto_init_update "*" 0
	proto_send_update "$INTERFACE"
}

case "$2" in
	bound)
		teardown_interface "$1"
		setup_interface "$1"
	;;
	informed|updated|rebound)
		setup_interface "$1"
	;;
	ra-updated)
		[ -n "$ADDRESSES$RA_ADDRESSES$PREFIXES$USERPREFIX" ] && setup_interface "$1"
	;;
	started|stopped|unbound)
		teardown_interface "$1"
	;;
esac

# user rules
[ -f /etc/odhcp6c.user ] && . /etc/odhcp6c.user

exit 0
