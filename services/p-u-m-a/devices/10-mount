#!/bin/sh
# Copyright (C) 2011 OpenWrt.org

blkdev=`dirname $DEVPATH`
echo "Usb-storage:the blkdev is $blkdev" >> /tmp/mount.log

list_name=""
space=" "
temp=""

disk_name=""
multypart_flag=0
LOG="/tmp/mount_block.log"


#echo "BUSNUM is $BUSNUM SEQNUM=$SEQNUM ACTION=$ACTION SUBSYSTEM=$SUBSYSTEM FIRMWARE=$FIRMWARE DEVNAME=$DEVNAME DEVTYPE=$DEVTYPE " >> /tmp/mount.log
#echo " PHYSDEVDRIVER=$PHYSDEVDRIVER PHYSDEVPATH=$PHYSDEVPATH PHYSDEVBUS=$PHYSDEVBUS DEVICE=$DEVICE MODALIAS=$MODALIAS">> /tmp/mount.log
#echo "MAJOR=$MAJOR MINOR=$MINOR PRODUCT=$PRODUCT INTERFACE=$INTERFACE TYPE=$TYPE BUSNUM=$BUSNUM ($@)" >> /tmp/mount.log
#echo > /tmp/mount.log

dlna_share(){
	dlna_enabled=`uci get minidlna.config.enabled`
	ps |grep minidlna |grep -v grep
	if [ $? -eq 0 -a $dlna_enabled -eq 1 ];then
		/etc/init.d/minidlna restart
	fi
}

###
#check if there are same special symbol in the disk-name string.
#the special symbol include space and  "."	
###
disk_name_deal(){
	disk_name=""
	local TMP=""
	local refer_name=""
	local tmp_name=$1
	
	echo "FUNC:disk_name_deal:the orginal disk_name is $tmp_name" >> /tmp/mount.log
	#######################################################
	#use the "_" to replace the "space" of the tmp_name.
	#######################################################
	tmp_name=$tmp_name" "
	while [ -n "$tmp_name" ] ; do
		TMP="$TMP${tmp_name%%" "*}"
		tmp_name=${tmp_name#*" "}
		[ -n "$TMP" ] && TMP=$TMP"_"
	done
	##delete the last '_' of the tmp_name
	tmp_name=${TMP%*_}
	#######################################################
	
	echo "FUNC:disk_name_deal:the tmp name  is $tmp_name" >> /tmp/mount.log
	
	#######################################################
	#use the "_" to replace the "." of the tmp_name.
	#######################################################
	tmp_name=$tmp_name"."
	TMP=""
	while [ -n "$tmp_name" ] ; do
		TMP="$TMP${tmp_name%%"."*}"
		tmp_name=${tmp_name#*"."}
		[ -n "$TMP" ] && TMP=$TMP"_"
	done
	##delete the last '_' of the tmp_name
	tmp_name=${TMP%*_}
	######################################################
	
	disk_name=$tmp_name
	echo "FUNC:disk_name_deal:the disk_name is $disk_name" >> /tmp/mount.log
	
	###
	#check if there is a same diskname exists already.
	###
	if [ $multypart_flag -eq 1 ];then
		echo "FUNC:disk_name_deal:#####the multypart_flag = 1" >> /tmp/mount.log
	else
		cat /etc/config/devices |grep usb-storage 
		n=`grep -rn "config automount" /etc/config/devices -c`
		let n--
		while [ $n -ge 0 ]
		do
			refer_name=`uci get devices.@automount[$n].name`
			if [ ! -z $refer_name ];then
					if [ "$disk_name" == "$refer_name" ];then
							disk_name=$disk_name"_1"
					fi
			fi
			let n--
		done
		echo "FUNC:disk_name_deal:#####the multypart_flag = 0" >> /tmp/mount.log
	fi
	echo "FUNC:disk_name_deal:the disk_name is $disk_name" >> /tmp/mount.log
}
usb_led_deal(){
	if [ -d /sys/class/leds/ap148:blue:usb1 ]; then
		port_number=$1
		usb_version=$2
		local dev
		local name
		local sysfs
		if [ $port_number -eq 1 -a "$usb_version" = "2.0" ];then
			dev="1-1"
			name="USB1"
			sysfs="ap148:blue:usb1"	
		elif [ $port_number -eq 2 -a "$usb_version" = "2.0" ];then
			dev="3-1"
			name="USB2"
			sysfs="ap148:blue:usb2"	
		elif [ $port_number -eq 1 -a "$usb_version" = "3.0" ];then
			dev="2-1"
			name="USB1"
			sysfs="ap148:blue:usb1"	
		elif [ $port_number -eq 2 -a "$usb_version" = "3.0" ];then
			dev="4-1"
			name="USB2"
			sysfs="ap148:blue:usb2"	
		fi
	
		uci set system."led"_${port_number}="led"	
		uci set system."led"_${port_number}.name="$name"
		uci set system."led"_${port_number}.sysfs="$sysfs"
		uci set system."led"_${port_number}.trigger="usbdev"
		uci set system."led"_${port_number}.dev="$dev"
		uci set system."led"_${port_number}.interval="50"
		#uci commit system
	
		#/etc/init.d/led restart
	else
		echo > /dev/null;
	fi

}

usb_addinfo(){
	disk=$1 
	dest_blkdev=$2
	usb_num=0
	port_exit=0
	
	echo "FUNC:usb_addinfo:disk is [$disk]" >> /tmp/mount.log
	disk=${disk/[0-9]/}
	echo " " >> /tmp/mount.log
	echo "FUNC:usb_addinfo:now disk is [$disk]" >> /tmp/mount.log
	disk_totalsize=`fdisk -l |grep  -w /dev/$disk |awk -F " " '{print $3}'`
	size_unit=`fdisk -l |grep -w /dev/$disk |awk -F" " '{print $4}'`
	if [ $disk_totalsize ];then
		if [ "$size_unit" = "MB," ];then
			disk_totalsize=`awk 'BEGIN{printf "%.2f\n",'$disk_totalsize'/'1024'}'`"G"
		else
			disk_totalsize=$disk_totalsize"G"
		fi
		#############################################################
		##get the free size start
		#############################################################
		part_info=`fdisk -l /dev/$disk|grep ^/dev/*|awk '{print $1}'`
		time=0
		part_info=`echo $part_info`
		echo "FUNC:usb_addinfo:the part_info is $part_info" >> /tmp/mount.log
		for i in $part_info
		do
			echo "FUNC:usb_addinfo:the time is $time [[[[the disk is $i]]]]]" >> /tmp/mount.log	
			if [ $time -eq 0 ];then
				disk_freesize=`df -h $i |grep $i |awk '{print $4}'`
				disk_freesize=${disk_freesize/[A-Z]/}
				echo "FUNC:usb_addinfo:the first free size is $disk_freesize" >> /tmp/mount.log
			else
				multypart_flag=1
				tmpsize=`df -h $i |grep $i |awk '{print $4}'`
				if [ ! -z $tmpsize ];then
					echo "FUNC:usb_addinfo:the orginal tmpsize is $tmpsize" >> /tmp/mount.log
					tmpsize=${tmpsize/[A-Z]/}
					echo "FUNC:usb_addinfo:the temp size is $tmpsize" >> /tmp/mount.log
					disk_freesize=`awk 'BEGIN{printf '$disk_freesize'+'$tmpsize'}'`
				fi
			fi
			let time++
			sleep 1
		done
		disk_freesize="$disk_freesize""G"
		echo "FUNC:usb_addinfo:the freesize is $disk_freesize" >> /tmp/mount.log
		#get the free size end
		#############################################################
		#The usb1 present the first usb port(right side usb port) ##maybe the usb2 is the usb3.0 with the port 1
		#The usb3 present the second usb port(back side usb port) ##maybe the usb4 is the usb3.0 with the prot 2
		usb_num=`grep -rn "config usb-storage" /etc/config/devices -c`
		echo "FUNC:usb_addinfo:ther is $usb_num usb-storage" >> /tmp/mount.log
		if [ $usb_num -eq 1 ];then
			port_exit=`uci get devices.@usb-storage[0].port`
			port_disk=`uci get devices.@usb-storage[0].disk`
			
			echo "FUNC:usb_addinfo:the port_exit is [$port_exit] the disk is [$port_disk]" >>/tmp/mount.log
			
			if [ $port_exit -eq 2 -a "$port_disk" != "$disk" ];then 
				echo "FUNC:usb_addinfo:the port 2 is already been used" >> /tmp/mount.log                                                      
				if [ -d /sys/bus/usb/devices/usb1/1-1 -o -d /sys/bus/usb/devices/usb2/2-1 ];then
					#deal with 
					[ -d /sys/bus/usb/devices/usb1/1-1 ] && usb_led_deal 1 2.0 
					[ -d /sys/bus/usb/devices/usb2/2-1 ] && usb_led_deal 1 3.0

					echo "there is a usb1-1 or usb2-1" >>/tmp/mount.log
					usb1_name=`cat /sys/$dest_blkdev/device/vendor`
					usb1_name=`echo $usb1_name`
					usb1_num=`cat /sys/$dest_blkdev/device/model`
					usb1_num=`echo $usb1_num`
					disk1_name=$usb1_name"_"$usb1_num
					
					disk_name_deal "$disk1_name"

					uci set devices.$disk_name="usb-storage"
					uci set devices.$disk_name.name=$disk_name
					uci set devices.$disk_name.port="1"
					uci set devices.$disk_name.disk=$disk
					uci set devices.$disk_name.totalsize=$disk_totalsize
					uci set devices.$disk_name.freesize=$disk_freesize
				fi
			elif [ $port_exit -eq 2 -a "$port_disk" == "$disk" ];then
				echo "FUNC:usb_addinfo:the port 2 is already been used" >> /tmp/mount.log   
				 if [ -d /sys/bus/usb/devices/usb3/3-1 -o -d /sys/bus/usb/devices/usb4/4-1 ];then
					echo "there is a usb3-1 or usb4-1" >>/tmp/mount.log
					usb2_name=`cat /sys/$dest_blkdev/device/vendor`
					usb2_name=`echo $usb2_name`
					usb2_num=`cat /sys/$dest_blkdev/device/model`
					usb2_num=`echo $usb2_num`	
					disk2_name=$usb2_name"_"$usb2_num
					
					disk_name_deal "$disk2_name"

					uci set devices.$disk_name="usb-storage"
					uci set devices.$disk_name.name=$disk_name
					uci set devices.$disk_name.port="2"
					uci set devices.$disk_name.disk=$disk
					uci set devices.$disk_name.totalsize=$disk_totalsize
					uci set devices.$disk_name.freesize=$disk_freesize
					#deal with 
					[ -d /sys/bus/usb/devices/usb3/3-1 ] && usb_led_deal 2 2.0 
					[ -d /sys/bus/usb/devices/usb4/4-1 ] && usb_led_deal 2 3.0
				fi		
			elif [ $port_exit -eq 1 -a "$port_disk" != "$disk" ];then
				echo "FUNC:usb_addinfo:the port 1 is already been used the disk is [$disk] [$port_disk]" >> /tmp/mount.log   
				if [ -d /sys/bus/usb/devices/usb3/3-1 -o -d /sys/bus/usb/devices/usb4/4-1 ];then
					echo "there is a usb3-1" >>/tmp/mount.log
					usb2_name=`cat /sys/$dest_blkdev/device/vendor`
					usb2_name=`echo $usb2_name`
					usb2_num=`cat /sys/$dest_blkdev/device/model`
					usb2_num=`echo $usb2_num`
					disk2_name=$usb2_name"_"$usb2_num
					
					disk_name_deal "$disk2_name"
					
					uci set devices.$disk_name="usb-storage"
					uci set devices.$disk_name.name=$disk_name
					uci set devices.$disk_name.port="2"
					uci set devices.$disk_name.disk=$disk
					uci set devices.$disk_name.totalsize=$disk_totalsize
					uci set devices.$disk_name.freesize=$disk_freesize
					#deal with
					[ -d /sys/bus/usb/devices/usb3/3-1 ] && usb_led_deal 2 2.0
					[ -d /sys/bus/usb/devices/usb4/4-1 ] && usb_led_deal 2 3.0
				fi
			elif [ $port_exit -eq 1 -a "$port_disk" == "$disk" ];then
				echo "FUNC:usb_addinfo:the port 1 is already been used the disk is [$disk] [$port_disk]" >> /tmp/mount.log 
				if [ -d /sys/bus/usb/devices/usb1/1-1 -o -d /sys/bus/usb/devices/usb2/2-1];then
					echo "there is a usb1-1" >>/tmp/mount.log
					usb1_name=`cat /sys/$dest_blkdev/device/vendor`
					usb1_name=`echo $usb1_name`
					usb1_num=`cat /sys/$dest_blkdev/device/model`
					usb1_num=`echo $usb1_num`	
					disk1_name=$usb1_name"_"$usb1_num
					
					disk_name_deal "$disk1_name"
					
					uci set devices.$disk_name="usb-storage"
					uci set devices.$disk_name.name=$disk_name
					uci set devices.$disk_name.port="1"
					uci set devices.$disk_name.disk=$disk
					uci set devices.$disk_name.totalsize=$disk_totalsize
					uci set devices.$disk_name.freesize=$disk_freesize
					#deal with usb led
					[ -d /sys/bus/usb/devices/usb1/1-1 ] && usb_led_deal 1 2.0
					[ -d /sys/bus/usb/devices/usb2/2-1 ] && usb_led_deal 1 3.0
				fi
			fi
		elif [ $usb_num -eq 2 ];then
			echo "FUNC:usb_addinfo:#####there are 2 port exist. $dest_blkdev " >> /tmp/mount.log	
			tag_disk_name=`cat /sys/$dest_blkdev/device/vendor`
			tag_disk_name=`echo $tag_disk_name`
			tag_disk_num=`cat /sys/$dest_blkdev/device/model`
			tag_disk_num=`echo $tag_disk_num`
	
			tag_disk=$tag_disk_name"_"$tag_disk_num
			disk_name_deal "$tag_disk"
			
			echo "FUNC:usb_addinfo:change the dest disk $disk_name" >> /tmp/mount.log
			uci set devices.$disk_name.totalsize=$disk_totalsize
			uci set devices.$disk_name.freesize=$disk_freesize
			echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" >> /tmp/mount.log
			
		else 
			##there is no usb-storage exist already.
		
			##check if there is a printer
			printer_port=`uci get devices.@printer[0].port`
			if [ -n "$printer_port" ];then
				echo "FUNC:usb_addinfo:There is a printer mounted on port $printer_port" >> /tmp/mount.log
				###there is a printer mounted on the router.
				if [ $printer_port -eq 2 -a -d /sys/bus/usb/devices/usb1/1-1 -o -d /sys/bus/usb/devices/usb2/2-1 ];then
					echo "there is no any usb-storage before." >>/tmp/mount.log
					echo "there is a usb1-1" >>/tmp/mount.log
					usb1_name=`cat /sys/$dest_blkdev/device/vendor`
					usb1_name=`echo $usb1_name`	
					usb1_num=`cat /sys/$dest_blkdev/device/model`
					usb1_num=`echo $usb1_num`				
					disk1_name=$usb1_name"_"$usb1_num
					
					disk_name_deal "$disk1_name"
					
					uci set devices.$disk_name="usb-storage"
					uci set devices.$disk_name.name=$disk_name
					uci set devices.$disk_name.port="1"
					uci set devices.$disk_name.disk=$disk
					uci set devices.$disk_name.totalsize=$disk_totalsize
					uci set devices.$disk_name.freesize=$disk_freesize
					
					#deal with usb led
					[ -d /sys/bus/usb/devices/usb1/1-1 ] && usb_led_deal 1 2.0
					[ -d /sys/bus/usb/devices/usb2/2-1 ] && usb_led_deal 1 3.0
			
				elif [ $printer_port -eq 1 -a -d /sys/bus/usb/devices/usb3/3-1 -o -d /sys/bus/usb/devices/usb4/4-1 ];then
					echo "there is a usb3-1" >>/tmp/mount.log
					usb2_name=`cat /sys/$dest_blkdev/device/vendor`
					usb2_name=`echo $usb2_name`
					usb2_num=`cat /sys/$dest_blkdev/device/model`
					usb2_num=`echo $usb2_num`
					disk2_name=$usb2_name"_"$usb2_num
					
					disk_name_deal "$disk2_name"
					
					uci set devices.$disk_name="usb-storage"
					uci set devices.$disk_name.name=$disk_name
					uci set devices.$disk_name.port="2"
					uci set devices.$disk_name.disk=$disk
					uci set devices.$disk_name.totalsize=$disk_totalsize
					uci set devices.$disk_name.freesize=$disk_freesize
					
					#deal with usb led
					[ -d /sys/bus/usb/devices/usb3/3-1 ] && usb_led_deal 2 2.0
					[ -d /sys/bus/usb/devices/usb4/4-1 ] && usb_led_deal 2 3.0
				fi
			else
				echo "FUNC:usb_addinfo:There is no printer mounted on router" >> /tmp/mount.log
				if [ -d /sys/bus/usb/devices/usb1/1-1 -o -d /sys/bus/usb/devices/usb2/2-1 ];then
						echo "there is no any usb-storage before." >>/tmp/mount.log
						echo "there is a usb1-1" >>/tmp/mount.log
						usb1_name=`cat /sys/$dest_blkdev/device/vendor`
						usb1_name=`echo $usb1_name`	
						usb1_num=`cat /sys/$dest_blkdev/device/model`
						usb1_num=`echo $usb1_num`				
						disk1_name=$usb1_name"_"$usb1_num
						
						disk_name_deal "$disk1_name"
						
						uci set devices.$disk_name="usb-storage"
						uci set devices.$disk_name.name=$disk_name
						uci set devices.$disk_name.port="1"
						uci set devices.$disk_name.disk=$disk
						uci set devices.$disk_name.totalsize=$disk_totalsize
						uci set devices.$disk_name.freesize=$disk_freesize
						
						#deal with usb led
						[ -d /sys/bus/usb/devices/usb1/1-1 ] && usb_led_deal 1 2.0
						[ -d /sys/bus/usb/devices/usb2/2-1 ] && usb_led_deal 1 3.0
				
				elif [ -d /sys/bus/usb/devices/usb3/3-1 -o -d /sys/bus/usb/devices/usb4/4-1 ];then
						echo "there is a usb3-1" >>/tmp/mount.log
						usb2_name=`cat /sys/$dest_blkdev/device/vendor`
						usb2_name=`echo $usb2_name`
						usb2_num=`cat /sys/$dest_blkdev/device/model`
						usb2_num=`echo $usb2_num`
						disk2_name=$usb2_name"_"$usb2_num
						
						disk_name_deal "$disk2_name"
						
						uci set devices.$disk_name="usb-storage"
						uci set devices.$disk_name.name=$disk_name
						uci set devices.$disk_name.port="2"
						uci set devices.$disk_name.disk=$disk
						uci set devices.$disk_name.totalsize=$disk_totalsize
						uci set devices.$disk_name.freesize=$disk_freesize
						#deal with usb led
						[ -d /sys/bus/usb/devices/usb3/3-1 ] && usb_led_deal 2 2.0
						[ -d /sys/bus/usb/devices/usb4/4-1 ] && usb_led_deal 2 3.0
				fi
			fi
		fi
	fi
	uci commit
	echo "restart the usb led init programe" >> /tmp/mount.log
	/etc/init.d/led restart 
	echo "writhe the config-devices over!"  >> /tmp/mount.log

}
clear() {
	umount /mnt/*
	enable=`uci get devices.@printer[0].enable`
	printer_port=`uci get devices.@printer[0].port`
	rm -rf /etc/config/devices
	rm -rf /mnt/*
	touch /etc/config/devices
	uci add devices printer
	uci set devices.@printer[0].enable=$enable
	uci add_list devices.@printer[0].port=$printer_port
	uci commit
}

getLabel() {
	k=`grep -rn "config automount" /etc/config/devices -c`
	let j=k-1
	while [ $j -ge 0 ]; do
		label_exit=`uci get devices.@automount[$j].label`
		list_name=$list_name$space$label_exit
		let j--
	done
}

checkname() {
	start=$1
	end=$2
	num=$3
	
	for value in $list_name
	do
		flag=1
		if [ $end == $value ];then
			end=$start"_$num"
			let num++
			checkname $start $end $num
			flag=0
		fi
	done
	if [ $flag==1 ]; then
		temp=$end
	fi
		
}
base=`basename $blkdev`

echo "the basename of the blkdev is $base" > $LOG

#if [ `basename $blkdev` != "block" -a ${base:0:8} != "mtdblock" -a ${base:0:3} != "mtd" ]; then
if [ ${base:0:2} == "sd" ]; then
	echo "the dest blkdev is $blkdev" >> $LOG
	if [ -f /tmp/devices ]; then
		touch /tmp/devices
	else
		clear
		touch /tmp/devices
	fi
	device=`basename $DEVPATH`
	echo "the device is [$device] " >> /tmp/mount.log
	case "$ACTION" in
		add)	
#			usb_addinfo $device $blkdev
					
			echo "The dest device is:[$device]" >> /tmp/mount.log
			
			# vfat & ntfs-3g check
			if [ `which blkid` ];then
				
:<<EOF
			if [ `which fdisk` ]; then
				isntfs=`fdisk -l | grep $device | grep NTFS |grep -v exFAT`
				isvfat=`fdisk -l | grep $device | grep FAT |grep -v exFAT`
				isexfat=`fdisk -l | grep $device | grep exFAT`
EOF
				filetype=`blkid /dev/$device |cut -d" " -f4|cut -d"=" -f2|cut -d"\"" -f2`
				if [ $filetype = "vfat" ];then
					isvfat=$filetype
				elif [ $filetype = "ntfs" ];then
					isntfs=$filetype
				elif [ $filetype = "exfat" ];then
					isexfat=$filetype
				else
					isvfat=""
					isntfs=""
					isexfat=""
				fi
				echo "the isexfat is [$isexfat]" >> $LOG
				isfuse=`lsmod | grep fuse`
				isntfs3g=`which ntfs-3g`
			else
				isntfs=""
				isvfat=""
			fi
			label=`blkid -o value -s LABEL /dev/$device`
			echo "The first first lable is:[$label]" >> /tmp/mount.log
			echo "The first first lable is:[$label]" >> $LOG
			if [ -z $label ]; then
                		label="UNTITLED"
            fi
			key=1
			start=$label
			getLabel
			checkname $start $start $key
			label_real=$temp
			
			mkdir -p /mnt/$label_real
			isfat=0
			# mount with ntfs-3g if possible, else with default mount
			if [ "$isntfs" -a "$isfuse" -a "$isntfs3g" ]; then
				echo "mount the disk with ntfs-3g format" >> $LOG
				ntfs-3g -o nls=utf8 /dev/$device /mnt/$label_real
			elif [ "$isvfat" ]; then
				echo "mount the disk with vfat format" >> $LOG
		#		mount -t vfat -o umask=000,iocharset=utf8,quiet /dev/$device /mnt/$label_real
				mount -t vfat -o umask=000,utf8,quiet /dev/$device /mnt/$label_real
				isfat=1
			elif [ "$isexfat" ]; then
				echo "mount the disk with exfat format" >> $LOG
				echo -e "`date "+%F-%H:%M:%S"` \033[31m mount the exfat to the /mnt/$label_real \033[0m " >> $LOG
				mount -t exfat -o umask=000 /dev/$device /mnt/$label_real
				#isexfat=1
			else
				mount -t ext4 /dev/$device /mnt/$label_real -o rw,sync
			fi
			
			#add the port info to the uci config file
			usb_addinfo $device $blkdev
			
			# check device type
			
			#get the device information
			info=`df -h /dev/$device | grep /dev/$device`
			loop=0
			for value in $info
			do
				# device total size 
				if [ 1 -eq $loop ]; then
					totalsize=$value
				fi
				# device free size 
				if [ 3 -eq $loop ]; then
					freesize=$value
				fi
				let loop++
			done
			
			# 
			m=`grep -rn "config automount" /etc/config/devices -c`
			#
			extsys=0
			if [ -f /mnt/$label_real/.extsys ]; then
				extsys=3
			fi
			UUID=`blkid -o value -s UUID /dev/$device`
			uuid=`cat /etc/config/uuid`
			if [ $UUID == $uuid ]; then
					extsys=1
			fi
			
			u=`dirname $blkdev | grep usb -c`
			sd=`dirname $blkdev | grep mmc -c`
			vendor=`cat /sys/$blkdev/device/vendor`
			vendor=`echo $vendor`
			model=`cat /sys/$blkdev/device/model`
			model=`echo $model`
			name_sd=`cat /sys/$blkdev/device/name`
			#charge the device
			if [ $totalsize ]; then 
				if [ -d "/proc/scsi/usb-storage" -a 1 -eq $u ] ;then
					uci add devices automount
					disk_name=""
					disk_name_deal "$vendor""_""$model"
					#uci set devices.@automount[$m].name=$disk_name
					uci set devices.@automount[$m].name=$disk_name
					uci set devices.@automount[$m].label=$label_real
					uci set devices.@automount[$m].path=/mnt/$label_real
					uci set devices.@automount[$m].type=0
					uci set devices.@automount[$m].device=$device
					uci set devices.@automount[$m].totalsize=$totalsize
					uci set devices.@automount[$m].freesize=$freesize
					uci set devices.@automount[$m].extsys=$extsys
					uci set devices.@automount[$m].isfat=$isfat
					uci set devices.@automount[$m].uuid=$UUID
				elif [ ${device:0:3} == "mmc" -o 1 -eq $sd ]; then
					uci add devices automount		
					uci set devices.@automount[$m].name=$name_sd
					uci set devices.@automount[$m].label=$label_real
					uci set devices.@automount[$m].path=/mnt/$label_real
					uci set devices.@automount[$m].type=1
					uci set devices.@automount[$m].device=$device
					uci set devices.@automount[$m].totalsize=$totalsize
					uci set devices.@automount[$m].freesize=$freesize
					uci set devices.@automount[$m].extsys=$extsys
					uci set devices.@automount[$m].isfat=$isfat
					uci set devices.@automount[$m].uuid=$UUID
				elif [ $vendor == "ATA" ] || [ 0 -eq $u -a 0 -eq $sd ]; then
					uci add devices automount
					disk_name=""
					disk_name_deal "$vendor""_""$model"					
					uci set devices.@automount[$m].name=$disk_name
					uci set devices.@automount[$m].label=$label_real
					uci set devices.@automount[$m].path=/mnt/$label_real
					uci set devices.@automount[$m].type=2
					uci set devices.@automount[$m].device=$device
					uci set devices.@automount[$m].totalsize=$totalsize
					uci set devices.@automount[$m].freesize=$freesize
					uci set devices.@automount[$m].extsys=$extsys
					uci set devices.@automount[$m].isfat=$isfat
					uci set devices.@automount[$m].uuid=$UUID
				fi
			fi
			chmod 777 -R /mnt/$label_real
			uci commit
			echo $UUID >> /tmp/devices
			dlna_share
		;;
		remove)
			fuser -k /dev/$device
			umount -l /dev/$device
			n=`grep -rn "config automount" /etc/config/devices -c`
			let i=n-1
			while [ $i -ge 0 ]; do
				device_del=`uci get devices.@automount[$i].device`
				if [ $device_del == $device ]; then
					uuid_del=`uci get devices.@automount[$i].uuid`
					label_del=`uci get devices.@automount[$i].label`
					device_del=`uci get devices.@automount[$i].device`
					disk_del=`uci get devices.@automount[$i].name`
					uci delete devices.@automount[$i]
					uci delete devices.$disk_del
					uci commit
					rm -rf /mnt/$label_del
					rm -rf /dev/$device_del
					sed -i "/$uuid_del/d" /tmp/devices
				fi
				let i--
			done
			if [ !  -s "/tmp/devices" ];then
				rm -rf /tmp/devices 
			fi
			/etc/init.d/led restart
		;;
	esac
fi
