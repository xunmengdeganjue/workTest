--- a/src/mod_webdav.c	2010-08-17 17:04:38.000000000 +0800
+++ b/src/mod_webdav.c	2013-03-29 11:05:11.176263000 +0800
@@ -659,17 +659,47 @@
 	return have_multi_status;
 }
 
+//djnakata
+static void webdav_create_newfilename(char *new_filename, const char *src, const char *dst, const char *key)
+{
+	char *ptr = NULL;
+	
+	if(new_filename == NULL || src == NULL || dst == NULL || key == NULL)
+		{
+			return;
+		}
+
+	printf("djnakata rename 123, src is %s, dst is %s\n", src, dst);
+
+	strcpy(new_filename, src);
+
+	if((ptr = strstr(dst, key)) == NULL)
+		{
+			return;
+		}
+
+	strcat(new_filename, "/");
+
+	strcat(new_filename, ptr+strlen(key)+1);
+	
+	printf("new_filename is %s\n", new_filename);
+}
+
 static int webdav_copy_file(server *srv, connection *con, plugin_data *p, physical *src, physical *dst, int overwrite) {
 	stream s;
 	int status = 0, ofd;
+	char newfilename[2048] = {0}; //djnakata
 	UNUSED(srv);
 	UNUSED(con);
 
 	if (stream_open(&s, src->path)) {
 		return 403;
 	}
-
-	if (-1 == (ofd = open(dst->path->ptr, O_WRONLY|O_TRUNC|O_CREAT|(overwrite ? 0 : O_EXCL), WEBDAV_FILE_MODE))) {
+	
+	//djnakata
+	webdav_create_newfilename(newfilename, con->physical.basedir->ptr, dst->rel_path->ptr, con->physical.key->ptr);
+	
+	if (-1 == (ofd = open(newfilename/*dst->path->ptr*/, O_WRONLY|O_TRUNC|O_CREAT|(overwrite ? 0 : O_EXCL), WEBDAV_FILE_MODE))) {
 		/* opening the destination failed for some reason */
 		switch(errno) {
 		case EEXIST:
@@ -1233,13 +1263,19 @@
 
 	switch (con->request.http_method) {
 	case HTTP_METHOD_PROPFIND:
+		printf("djnakata HTTP_METHOD_PROPFIND\n");
+		//liqiyuan
+		data_string *ds = (data_string *)con->request_content_queue->tempdirs->data[0];
+		buffer_copy_string_buffer(ds->value, con->physical.basedir);
+		
 		/* they want to know the properties of the directory */
 		req_props = NULL;
-
+		
 		/* is there a content-body ? */
 
 		switch (stat_cache_get_entry(srv, con, con->physical.path, &sce)) {
 		case HANDLER_ERROR:
+			printf("djnakata HTTP_METHOD_PROPFIND\n HANDLER_ERROR\n");//djnakata
 			if (errno == ENOENT) {
 				con->http_status = 404;
 				return HANDLER_FINISHED;
@@ -1395,7 +1431,7 @@
 			buffer_append_string_len(b,CONST_STR_LEN("</D:response>\n"));
 
 			break;
-		case 1:
+		case 1:    
 			if (NULL != (dir = opendir(con->physical.path->ptr))) {
 				struct dirent *de;
 				physical d;
@@ -1403,7 +1439,7 @@
 
 				d.path = buffer_init();
 				d.rel_path = buffer_init();
-
+				
 				while(NULL != (de = readdir(dir))) {
 					if (de->d_name[0] == '.' && de->d_name[1] == '.' && de->d_name[2] == '\0') {
 						continue;
@@ -1493,15 +1529,18 @@
 
 		return HANDLER_FINISHED;
 	case HTTP_METHOD_MKCOL:
+		printf("djnakata HTTP_METHOD_MKCOL %s, %s\n", con->physical.path->ptr, p->physical.path->ptr);
 		if (p->conf.is_readonly) {
 			con->http_status = 403;
+			
+			printf("403 HANDLER_FINISHED\n");
 			return HANDLER_FINISHED;
 		}
 
 		if (con->request.content_length != 0) {
 			/* we don't support MKCOL with a body */
 			con->http_status = 415;
-
+			printf("415 HANDLER_FINISHED\n");
 			return HANDLER_FINISHED;
 		}
 
@@ -1510,14 +1549,17 @@
 		if (-1 == mkdir(con->physical.path->ptr, WEBDAV_DIR_MODE)) {
 			switch(errno) {
 			case EPERM:
+				printf("djnakata HTTP_METHOD_MKCOL EPERM\n");
 				con->http_status = 403;
 				break;
 			case ENOENT:
 			case ENOTDIR:
+				printf("djnakata HTTP_METHOD_MKCOL ENOENT or ENOTDIR\n");
 				con->http_status = 409;
 				break;
 			case EEXIST:
 			default:
+				printf("djnakata HTTP_METHOD_MKCOL errno is %d\n", errno);
 				con->http_status = 405; /* not allowed */
 				break;
 			}
@@ -1528,6 +1570,7 @@
 
 		return HANDLER_FINISHED;
 	case HTTP_METHOD_DELETE:
+		printf("djnakata HTTP_METHOD_DELETE\n");
 		if (p->conf.is_readonly) {
 			con->http_status = 403;
 			return HANDLER_FINISHED;
@@ -1607,7 +1650,8 @@
 			con->http_status = 204;
 		}
 		return HANDLER_FINISHED;
-	case HTTP_METHOD_PUT: {
+	case HTTP_METHOD_PUT: { 
+		printf("djnakata HTTP_METHOD_PUT\n");//djnakata
 		int fd;
 		chunkqueue *cq = con->request_content_queue;
 		chunk *c;
@@ -1705,14 +1749,11 @@
 		}
 
 		con->file_finished = 1;
-
 		for (c = cq->first; c; c = cq->first) {
 			int r = 0;
-
 			/* copy all chunks */
 			switch(c->type) {
 			case FILE_CHUNK:
-
 				if (c->file.mmap.start == MAP_FAILED) {
 					if (-1 == c->file.fd &&  /* open the file if not already open */
 					    -1 == (c->file.fd = open(c->file.name->ptr, O_RDONLY))) {
@@ -1720,7 +1761,6 @@
 
 						return HANDLER_ERROR;
 					}
-
 					if (MAP_FAILED == (c->file.mmap.start = mmap(0, c->file.length, PROT_READ, MAP_SHARED, c->file.fd, 0))) {
 						log_error_write(srv, __FILE__, __LINE__, "ssbd", "mmap failed: ",
 								strerror(errno), c->file.name,  c->file.fd);
@@ -1729,7 +1769,7 @@
 
 						return HANDLER_ERROR;
 					}
-
+					
 					c->file.mmap.length = c->file.length;
 
 					close(c->file.fd);
@@ -1737,7 +1777,6 @@
 
 					/* chunk_reset() or chunk_free() will cleanup for us */
 				}
-
 				if ((r = write(fd, c->file.mmap.start + c->offset, c->file.length - c->offset)) < 0) {
 					switch(errno) {
 					case ENOSPC:
@@ -1781,6 +1820,7 @@
 	}
 	case HTTP_METHOD_MOVE:
 	case HTTP_METHOD_COPY: {
+		printf("djnakata HTTP_METHOD_MOVE or HTTP_METHOD_COPY\n");
 		buffer *destination = NULL;
 		char *sep, *sep2, *start;
 		int overwrite = 1;
@@ -1903,7 +1943,12 @@
 			/* src is a directory */
 
 			if (-1 == stat(p->physical.path->ptr, &st)) {
-				if (-1 == mkdir(p->physical.path->ptr, WEBDAV_DIR_MODE)) {
+				//djnakata
+				char new_filename[2048] = {0};
+				
+				webdav_create_newfilename(new_filename, con->physical.basedir->ptr, p->physical.rel_path->ptr, con->physical.key->ptr);
+				
+				if (-1 == mkdir(new_filename/*p->physical.path->ptr*/, WEBDAV_DIR_MODE)) {
 					con->http_status = 403;
 					return HANDLER_FINISHED;
 				}
@@ -1977,8 +2022,11 @@
 
 			if (con->request.http_method == HTTP_METHOD_MOVE) {
 				/* try a rename */
-
-				if (0 == rename(con->physical.path->ptr, p->physical.path->ptr)) {
+				//djnakata
+				char new_filename[2048] = {0};
+				webdav_create_newfilename(new_filename, con->physical.basedir->ptr, p->physical.rel_path->ptr, con->physical.key->ptr);
+				
+				if (0 == rename(con->physical.path->ptr, new_filename/*p->physical.path->ptr*/)) {
 #ifdef USE_PROPPATCH
 					sqlite3_stmt *stmt;
 
@@ -2041,6 +2089,7 @@
 		return HANDLER_FINISHED;
 	}
 	case HTTP_METHOD_PROPPATCH:
+		printf("djnakata HTTP_METHOD_PROPPATCH\n");
 		if (p->conf.is_readonly) {
 			con->http_status = 403;
 			return HANDLER_FINISHED;
@@ -2187,6 +2236,7 @@
 		con->http_status = 501;
 		return HANDLER_FINISHED;
 	case HTTP_METHOD_LOCK:
+		printf("djnakata HTTP_METHOD_LOCK\n");
 		/**
 		 * a mac wants to write
 		 *
@@ -2427,6 +2477,7 @@
 		return HANDLER_FINISHED;
 #endif
 	case HTTP_METHOD_UNLOCK:
+		printf("djnakata HTTP_METHOD_UNLOCK\n");
 #ifdef USE_LOCKS
 		if (NULL != (ds = (data_string *)array_get_element(con->request.headers, "Lock-Token"))) {
 			buffer *locktoken = ds->value;
@@ -2506,6 +2557,5 @@
 	p->cleanup     = mod_webdav_free;
 
 	p->data        = NULL;
-
 	return 0;
 }
