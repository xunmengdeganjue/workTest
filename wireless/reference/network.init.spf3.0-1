#!/bin/sh /etc/rc.common

START=20
STOP=90

USE_PROCD=1

init_switch() {
	setup_switch() { return 0; }

	include /lib/network
	setup_switch
}

network_cleanup() {
	killall netifd 2&> /dev/null
}

start_service() {
	init_switch

	[ -e "usr/sbin/fst.sh" ] && /usr/sbin/fst.sh configure
	local ifname=`uci get network.wan.ifname`
	/etc/init.d/ipv6 start

	procd_open_instance
	procd_set_param command /sbin/netifd
	procd_set_param respawn
	procd_set_param watch network.interface
	[ -e /proc/sys/kernel/core_pattern ] && {
		procd_set_param limits core="unlimited"
		echo '/tmp/%e.%p.%s.%t.core' > /proc/sys/kernel/core_pattern
	}

	procd_close_instance
}

reload_service() {
	init_switch
	/etc/init.d/check_del_spectrum_rule check
	ubus call network reload
	/sbin/wifi reload_legacy
	/etc/init.d/ssid_vlan.sh reload
	/etc/init.d/check_del_spectrum_rule restore
}

stop() {
	/etc/init.d/check_del_spectrum_rule check
	/etc/init.d/ssid_vlan.sh stop
	/sbin/wifi down
	procd_kill network ''
	network_cleanup
}

service_running() {
	local ifname=`uci get network.wan.ifname`
	ubus -t 30 wait_for network.interface
	/sbin/wifi reload_legacy
	echo 0 > /sys/class/net/br-lan/bridge/multicast_snooping
	echo 0 > /proc/sys/net/ipv6/conf/br-lan/autoconf
	connection_type=`uci get ipv6.@global[0].connection_type`
	if [ "$connection_type" != "0" ]; then
		echo 0 > /proc/sys/net/ipv6/conf/${ifname}/disable_ipv6
		echo 0 > /proc/sys/net/ipv6/conf/br-lan/disable_ipv6
	else
		echo 1 > /proc/sys/net/ipv6/conf/${ifname}/disable_ipv6
		echo 1 > /proc/sys/net/ipv6/conf/br-lan/disable_ipv6
	fi

	local lanaddr=`ifconfig br-lan |grep  Global |awk '{print $3}'`
	if [ -z "$lanaddr" ];then
		ip6tables -A forwarding_rule -i br-lan -j DROP
	else
		ip6tables -D forwarding_rule -i br-lan -j DROP
	fi

        killall netscan
        netscan >/dev/null 2>&1
	/etc/init.d/ssid_vlan.sh reload
	/etc/init.d/check_del_spectrum_rule restore
	
	#if close wifi and set IPV6 static model can not pull up dibbler process so sleep 5 can solve this problem 
	if [ "$connection_type" = "5" ]; then
		if [ "$wifi0status" = "1" ] && [ "$wifi1status" = "1" ]; then
			sleep 5
		fi
	fi

	local wanaddr=`ifconfig eth3 |grep  Global |awk '{print $3}'`
	if [ -z "$wanaddr" ];then
		sleep 12
	fi	

	/etc/init.d/ipv6 start do_dibbler_restart

	# for wan 8021x md5 authentication
	/etc/init.d/macsec restart
}

validate_atm_bridge_section()
{
	uci_validate_section network "atm-bridge" "${1}" \
		'unit:uinteger:0' \
		'vci:range(32, 65535):35' \
		'vpi:range(0, 255):8' \
		'atmdev:uinteger:0' \
		'encaps:or("llc", "vc"):llc' \
		'payload:or("bridged", "routed"):bridged'
}

validate_route_section()
{
	uci_validate_section network route "${1}" \
		'interface:string' \
		'target:cidr4' \
		'netmask:netmask4' \
		'gateway:ip4addr' \
		'metric:uinteger' \
		'mtu:uinteger' \
		'table:or(range(0,65535),string)'
}

validate_route6_section()
{
	uci_validate_section network route6 "${1}" \
		'interface:string' \
		'target:cidr6' \
		'gateway:ip6addr' \
		'metric:uinteger' \
		'mtu:uinteger' \
		'table:or(range(0,65535),string)'
}

validate_rule_section()
{
	uci_validate_section network rule "${1}" \
		'in:string' \
		'out:string' \
		'src:cidr4' \
		'dest:cidr4' \
		'tos:range(0,31)' \
		'mark:string' \
		'invert:bool' \
		'lookup:or(range(0,65535),string)' \
		'goto:range(0,65535)' \
		'action:or("prohibit", "unreachable", "blackhole", "throw")'
}

validate_rule6_section()
{
	uci_validate_section network rule6 "${1}" \
		'in:string' \
		'out:string' \
		'src:cidr6' \
		'dest:cidr6' \
		'tos:range(0,31)' \
		'mark:string' \
		'invert:bool' \
		'lookup:or(range(0,65535),string)' \
		'goto:range(0,65535)' \
		'action:or("prohibit", "unreachable", "blackhole", "throw")'
}

validate_switch_section()
{
	uci_validate_section network switch "${1}" \
		'name:string' \
		'enable:bool' \
		'enable_vlan:bool' \
		'reset:bool'
}

validate_switch_vlan()
{
	uci_validate_section network switch_vlan "${1}" \
		'device:string' \
		'vlan:uinteger' \
		'ports:list(ports)'
}

service_triggers()
{
	procd_add_reload_trigger network wireless

	procd_open_validate
	validate_atm_bridge_section
	validate_route_section
	validate_route6_section
	validate_rule_section
	validate_rule6_section
	validate_switch_section
	validate_switch_vlan
	procd_close_validate
}

restart() {
	ifdown -a
	sleep 1
	trap '' TERM
	stop "$@"
	network_cleanup
	start "$@"
}

shutdown() {
	ifdown -a
	sleep 1
	stop
	network_cleanup
}
